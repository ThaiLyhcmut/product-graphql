package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"ThaiLy/graph/generated"
	"ThaiLy/graph/model"
	"ThaiLy/graph/service"
	"context"
)

// Product is the resolver for the product field.
func (r *categoryResolver) Product(ctx context.Context, obj *model.Category, productInput *model.ProductInput) ([]*model.Product, error) {
	// Default values
	var offset, limit int
	offset, limit = 0, 10
	var featured *string

	// Check if ProductInput is provided and update the parameters
	if productInput != nil {
		if productInput.Offset != nil {
			offset = *productInput.Offset
		}
		if productInput.Limit != nil {
			limit = *productInput.Limit
		}
		featured = productInput.Featured
	}

	// Query products based on categoryID and other inputs
	var products []model.ProductDB
	result := service.GetDB().Where("categoryID = ?", obj.ID).Limit(limit).Offset(offset)

	// Apply filter for featured if it's provided
	if featured != nil {
		result = result.Where("featured = ?", *featured)
	}

	if result.Error != nil {
		return nil, result.Error
	}

	// Fetch the products from the database
	result = result.Find(&products)
	if result.Error != nil {
		return nil, result.Error
	}

	// Convert from ProductDB to Product (DTO)
	var productList []*model.Product
	for _, p := range products {
		product := p.ToProduct()
		productList = append(productList, product)
	}

	return productList, nil
}

// Category returns generated.CategoryResolver implementation.
func (r *Resolver) Category() generated.CategoryResolver { return &categoryResolver{r} }

type categoryResolver struct{ *Resolver }
