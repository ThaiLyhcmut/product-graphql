package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.62

import (
	"ThaiLy/graph/generated"
	"ThaiLy/graph/model"
	"context"
	"fmt"
)

// LoginAccount is the resolver for the loginAccount field.
func (r *mutationResolver) LoginAccount(ctx context.Context, account model.LoginAccountInput) (*model.Account, error) {
	result, err := r.accountController.LoginAccountController(account)
	if err != nil {
		return nil, err
	}
	return result, nil
}

// RegisterAccount is the resolver for the registerAccount field.
func (r *mutationResolver) RegisterAccount(ctx context.Context, account model.RegisterAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// UpdateAccount is the resolver for the updateAccount field.
func (r *mutationResolver) UpdateAccount(ctx context.Context, account *model.UpdateAccountInput) (*model.Account, error) {
	panic(fmt.Errorf("not implemented: UpdateAccount - updateAccount"))
}

// CreateOtp is the resolver for the createOtp field.
func (r *mutationResolver) CreateOtp(ctx context.Context, email string) (*model.Otp, error) {
	panic(fmt.Errorf("not implemented: CreateOtp - createOtp"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
